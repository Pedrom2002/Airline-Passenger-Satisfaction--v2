version: '3.8'

services:
  # API Principal
  airline-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - API_KEY=${API_KEY:-sk-development-key}
      - DATABASE_URL=postgresql://user:password@postgres:5432/airline_db
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - MODEL_VERSION=v1.0.1
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - airline-network

  # Banco de Dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: airline_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - airline-network

  # Redis para Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - airline-network

  # Nginx como Proxy Reverso
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - airline-api
    restart: unless-stopped
    networks:
      - airline-network

  # Prometheus para Métricas
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - airline-network

  # Grafana para Visualização
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - airline-network

  # MLflow para Tracking
  mlflow:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://user:password@postgres:5432/mlflow_db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/app/mlruns
    volumes:
      - ./mlruns:/app/mlruns
      - ./mlflow_requirements.txt:/app/requirements.txt
    command: >
      bash -c "pip install -r requirements.txt && 
               mlflow server --host 0.0.0.0 --port 5000 
               --backend-store-uri postgresql://user:password@postgres:5432/mlflow_db 
               --default-artifact-root /app/mlruns"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - airline-network

  # Worker para Processamento Background
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - WORKER_MODE=true
      - DATABASE_URL=postgresql://user:password@postgres:5432/airline_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - airline-network
    command: python worker.py

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  airline-network:
    driver: bridge